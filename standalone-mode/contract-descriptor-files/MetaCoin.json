{"contract": {"descriptor": {"name": "MetaCoin", "author": "Author Here", "language": "Solidity", "contract_type": "generic_contract", "contract_version": "1.0", "descriptor_version": "1.0", "abi": [{"constant": false, "inputs": [{"name": "addr", "type": "address"}], "name": "getBalanceInEth", "outputs": [{"name": "value", "type": "uint256"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "receiver", "type": "address"}, {"name": "amount", "type": "uint256"}], "name": "sendCoin", "outputs": [{"name": "sufficient", "type": "bool"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "addr", "type": "address"}], "name": "getBalance", "outputs": [{"name": "value", "type": "uint256"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "payable": false, "stateMutability": "nonpayable", "type": "constructor"}, {"anonymous": false, "inputs": [{"indexed": true, "name": "_from", "type": "address"}, {"indexed": true, "name": "_to", "type": "address"}, {"indexed": false, "name": "_value", "type": "uint256"}], "name": "Transfer", "type": "event"}], "userdoc": {"methods": {"getBalance(address)": {"notice": "Returns MetaCoin balance for a given address"}, "getBalanceInEth(address)": {"notice": "Returns equivalent Ether balance for a given address"}, "sendCoin(address,uint256)": {"notice": "Transfer coins from sender to receiver"}}}}, "endpoint": {}, "dev": {"devdoc": {"author": "Author Here", "methods": {"getBalance(address)": {"return": "{ \"value\" : \"Token balance of account\" }"}, "getBalanceInEth(address)": {"details": "Uses the `ConvertLib.sol` library for conversions", "return": "{ \"value\" : \"Ether equivalent balance of account\" }"}, "sendCoin(address,uint256)": {"details": "This is just a simple example of a coin-like contract. It is not standards compatible and cannot be expected to talk to other coin/token contracts. If you want to create a standards-compliant token, see: [ConsenSys/Tokens](https://github.com/ConsenSys/Tokens). Cheers!", "return": "{ \"sufficient\": \"Transfer is succesful\" }"}}, "title": "MetaCoin Interface"}, "sources": {"keccak256": "0xf583c580ac981029f63ec3e39bd97b6955eb91241d6f066897268c12e3412b98", "swarm_URL": "bzzr://d9a33154f48e2d75ec875dcaeff392fce12866a45855d04a3e4d0aaa7af9fe5b"}, "libraries": {}, "compiler": {"version": "0.4.24+commit.e67f0147", "evmVersion": "byzantium"}}}}